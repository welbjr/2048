{"version":3,"sources":["utils/helpers.js","hooks/useBoard.js","components/Number.js","components/Board.js","components/ToggleTheme.js","components/PreviousScores.js","App.js","index.js"],"names":["insertRandom","arr","randNumPosition","Math","floor","random","newBoard","length","x","y","flat","includes","haveZero","round","rotateBoard","createBoard","Object","entries","i","row","j","el","size","push","Array","fill","mutateBoard","direction","isNotZero","sumEquals","forEach","reduce","a","b","values","filter","map","reverse","zeroes","JSON","stringify","useBoard","useState","status","score","boardStatus","setBoardStatus","board","setBoard","useEffect","window","addEventListener","keyDownHandler","removeEventListener","key","newBoardStatus","boardCopy","possibleBoards","every","isLost","today","String","Date","getDay","padStart","getUTCDate","getHours","getMinutes","localStorage","setItem","memoColors","type","colorSaturations","playing","lost","Number","number","randomColor","hexString","className","style","backgroundColor","Board","animationVariants","spawn","scale","transition","duration","motion","div","variants","animate","renderBoard","ToggleTheme","theme","setTheme","oppositeTheme","button","onClick","whileHover","whileTap","show","opacity","hidden","pulse","hover","PreviousScores","showTable","setShowTable","h3","table","initial","keys","App","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.6cf4a37a.chunk.js","sourcesContent":["/**\n * Funções de ajuda principalmente para o useBoard.js\n */\n\n// Insere um número 2 ou 4 em uma posição aleatória\nconst insertRandom = (arr) => {\n  const randNumPosition = () => Math.floor(Math.random() * newBoard[0].length);\n  const haveZero = (arr) => arr.flat().includes(0);\n  let newBoard = [...arr];\n  let x = randNumPosition();\n  let y = randNumPosition();\n\n  // Retorna se o tabuleiro não possuir zero algum\n  if (!haveZero(newBoard)) {\n    return;\n  }\n\n  // Procura por uma posição com 0\n  while (newBoard[x][y] !== 0) {\n    x = randNumPosition();\n    y = randNumPosition();\n  }\n\n  // O valor 2 ou 4 será guardado na variável twoOrFour e em seguida\n  // inserido no tabuleiro\n  const twoOrFour = () => (Math.round(Math.random() * 1) === 0 ? 4 : 2);\n  newBoard[x][y] = twoOrFour();\n\n  return newBoard;\n};\n\nconst rotateBoard = (arr) => {\n  // Transforma as colunas em linhas\n  /* EX:\n      [1,  2,  3,  4 ]   =>   [1, 5, 9,  13]\n      [5,  6,  7,  8 ]        [2, 6, 10, 14]      \n      [9,  10, 11, 12]        [3, 7, 11, 15]\n      [13, 14, 15, 16]        [4, 8, 12, 16]\n      */\n  let newBoard = createBoard(arr.length);\n\n  for (let [i, row] of Object.entries(arr)) {\n    for (let [j, el] of Object.entries(row)) {\n      newBoard[j][i] = el;\n    }\n  }\n  return newBoard;\n};\n\n// Cria um tabuleiro inicial\nexport const createBoard = (size) => {\n  let arr = [];\n  for (let i = 1; i <= size; i++) {\n    arr.push(new Array(size).fill(0));\n  }\n  arr = insertRandom(arr);\n  return arr;\n};\n\n// Muta o tabuleiro baseado na direção\nexport const mutateBoard = (arr, direction) => {\n  const isNotZero = (el) => el !== 0;\n  const sumEquals = (el, i, arr) => {\n    if (el === arr[i + 1]) {\n      el *= 2;\n      arr[i + 1] = 0;\n    }\n    return el;\n  };\n  let newBoard = [...arr];\n\n  if (direction === \"up\" || direction === \"down\") {\n    // Para trabalhar com as colunas, o tabuleiro é rotacionado\n    newBoard = rotateBoard(newBoard);\n  }\n\n  // Aqui é feito o calculo do movimento para cada linha\n  newBoard.forEach((row, i) => {\n    // Retorna caso o array seja composto por zeros\n    if (row.reduce((a, b) => a + b) === 0) return;\n\n    let values;\n\n    // Exemplo do que é feito abaixo:\n    // [0,1,0,1] -> [1,1] -> [2] -> [0,0,0] + [2] -> [0,0,0,2] (ou [2,0,0,0] para \"left\")\n    if (direction === \"left\") {\n      values = row.filter(isNotZero).map(sumEquals).filter(isNotZero);\n    } else {\n      values = row\n        .filter(isNotZero)\n        .reverse()\n        .map(sumEquals)\n        .reverse()\n        .filter(isNotZero);\n    }\n\n    // Cria uma lista complementar de zeros\n    let zeroes = Array(row.length - values.length).fill(0);\n\n    // Junta os números com os zeros em uma lista\n    // e coloca esse array na linha i\n    if (direction === \"right\" || direction === \"down\")\n      newBoard[i] = [...zeroes, ...values];\n    else newBoard[i] = [...values, ...zeroes];\n  });\n\n  // Transforma novamente em coluna, se ele era uma\n  if (direction === \"up\" || direction === \"down\")\n    newBoard = rotateBoard(newBoard);\n\n  // Insere um número em uma posição aleatória se o tabuleiro tiver mudado\n  if (JSON.stringify(newBoard) !== JSON.stringify(arr))\n    return insertRandom(newBoard);\n\n  return newBoard;\n};\n\nexport const calculatePoints = (arr) => {\n  // Retorna o valor da soma de todos os elementos\n  return arr.flat().reduce((a, b) => a + b);\n};\n\nexport const isLost = (arr) => {\n  const haveZero = (arr) => arr.flat().includes(0);\n\n  // Se existir algum zero, a posição não pode estar perdida\n  if (haveZero(arr)) return false;\n\n  const boardCopy = [...arr];\n  const possibleBoards = [];\n\n  // É colocado em possibleBoards os tabuleiros possiveis de cada movimento\n  for (let direction of [\"up\", \"down\", \"left\", \"right\"]) {\n    // Estão em forma de json string para facilitar a comparação abaixo\n    possibleBoards.push(JSON.stringify(mutateBoard(boardCopy, direction)));\n  }\n\n  // Compara se os items são todos iguais e retorna um booleano\n  return possibleBoards.every((el) => el === possibleBoards[0]);\n};\n","/**\n * Hook customizado para lidar com o estado do tabuleiro.\n * As funções que manipulam o tabuleiro podem ser encontradas\n * em src/utils/helpers.js\n */\nimport { useState, useEffect } from \"react\";\nimport {\n  createBoard,\n  mutateBoard,\n  calculatePoints,\n  isLost,\n} from \"../utils/helpers\";\n\nconst useBoard = () => {\n  const [boardStatus, setBoardStatus] = useState({\n    status: \"playing\",\n    direction: \"\",\n    size: 4,\n    score: 1,\n  });\n  const [board, setBoard] = useState(createBoard(boardStatus.size));\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", keyDownHandler);\n    return () => {\n      window.removeEventListener(\"keydown\", keyDownHandler);\n    };\n  });\n\n  const keyDownHandler = ({ key }) => {\n    let newBoard = [...board];\n    let newBoardStatus = { ...boardStatus };\n\n    if (key === \"ArrowUp\") {\n      newBoard = mutateBoard(newBoard, \"up\");\n      newBoardStatus.direction = \"up\";\n    }\n    if (key === \"ArrowDown\") {\n      newBoard = mutateBoard(newBoard, \"down\");\n      newBoardStatus.direction = \"down\";\n    }\n    if (key === \"ArrowLeft\") {\n      newBoard = mutateBoard(newBoard, \"left\");\n      newBoardStatus.direction = \"left\";\n    }\n    if (key === \"ArrowRight\") {\n      newBoard = mutateBoard(newBoard, \"right\");\n      newBoardStatus.direction = \"right\";\n    }\n\n    const score = calculatePoints(newBoard);\n    newBoardStatus.score = score;\n\n    if (isLost(newBoard)) {\n      newBoardStatus.status = \"lost\";\n\n      // Guarda o horário que o jogador perdeu na variável today,\n      // no formato \"dd/YY,hh:mm\"\n      const today = `${String(new Date().getDay()).padStart(\n        2,\n        \"0\"\n      )}/${new Date().getUTCDate()}, ${new Date().getHours()}:${String(\n        new Date().getMinutes()\n      ).padStart(2, \"0\")}`;\n\n      // Salva o dia e o score nos cookies do usuário\n      localStorage.setItem(today, score);\n    }\n\n    setBoardStatus(newBoardStatus);\n    setBoard(newBoard);\n  };\n\n  return { board, setBoard, boardStatus, setBoardStatus };\n};\n\nexport default useBoard;\n","import React from \"react\";\nimport randomColor from \"random-color\";\n\n// A técnica de memoization é utilizada para se lembrar das cores dos números\nlet memoColors = { type: \"playing\", 0: \"#1f1f1f\" };\nconst colorSaturations = {\n  playing: [0.5, 0.9],\n  lost: [0.1, 0.6],\n};\n\nconst Number = ({ number, status }) => {\n  // Se o jogo estiver perdido, a paleta de cores é mudada\n  // para outra mais acinzentada,\n  // e as cores anteriores excluidas\n  if (status === \"lost\" && memoColors.type !== \"lost\") {\n    memoColors = { type: \"lost\" };\n  }\n\n  // Se o número não está no objeto memoColors, ele será inserido (como key)\n  // junto com uma cor aleatória (como value)\n  if (!memoColors[number])\n    memoColors[number] = randomColor(...colorSaturations[status]).hexString();\n\n  return (\n    <div className={`Number`} style={{ backgroundColor: memoColors[number] }}>\n      {number}\n    </div>\n  );\n};\n\nexport default Number;\n","/**\n * Renderiza o tabuleiro voltado pelo useBoard\n */\nimport React from \"react\";\nimport { motion } from \"framer-motion\";\nimport Number from \"./Number\";\n\nconst Board = ({ board, boardStatus }) => {\n  const animationVariants = {\n    spawn: {\n      scale: [1, 1.05, 1],\n      transition: {\n        duration: 0.2,\n      },\n    },\n  };\n\n  const renderBoard = (board) => {\n    return (\n      <div className=\"Board\">\n        {board.map((row, i) => (\n          <div className=\"Row\" key={i}>\n            {row.map((el, j) => (\n              <motion.div\n                key={`${i},${j}`}\n                variants={animationVariants}\n                animate={el > 0 ? \"spawn\" : \"\"}\n              >\n                <Number number={el} status={boardStatus.status} />\n              </motion.div>\n            ))}\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  return <>{renderBoard(board)}</>;\n};\n\nexport default Board;\n","/**\n * Ícone para mudar o tema\n */\nimport React from \"react\";\nimport { motion } from \"framer-motion\";\nimport { MdLightMode, MdDarkMode } from \"react-icons/md\";\n\nconst ToggleTheme = ({ theme, setTheme }) => {\n  const oppositeTheme = theme === \"__Light\" ? \"__Dark\" : \"__Light\";\n\n  const onClickHandler = () => {\n    setTheme(oppositeTheme);\n  };\n\n  return (\n    <motion.button\n      className=\"ToggleTheme\"\n      onClick={onClickHandler}\n      whileHover={{ scale: 1.1 }}\n      whileTap={{ scale: 0.9 }}\n    >\n      {theme === \"__Light\" ? (\n        <MdLightMode className={`ToggleTheme__Icon${theme}`} />\n      ) : (\n        <MdDarkMode className={`ToggleTheme__Icon${theme}`} />\n      )}\n    </motion.button>\n  );\n};\n\nexport default ToggleTheme;\n","/**\n * Esse componente renderiza uma tabela\n * com os scores salvos no localStorage como\n * key: date, value: score\n */\nimport React, { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { MdKeyboardArrowRight, MdKeyboardArrowDown } from \"react-icons/md\";\n\nconst variants = {\n  show: { opacity: 1 },\n  hidden: { opacity: 0 },\n  pulse: {\n    scale: 0.9,\n    transition: {\n      duration: 0.2,\n    },\n  },\n  hover: {\n    scale: 1.05,\n  },\n};\n\nconst PreviousScores = ({ theme }) => {\n  const [showTable, setShowTable] = useState(false);\n\n  const onClickHandler = () => {\n    setShowTable(!showTable);\n  };\n\n  const renderRows = () => {\n    return Object.keys(localStorage).map((el, i) => (\n      <tr\n        className={i % 2 === 0 ? \"Row__Light\" : \"Row__Dark\"}\n        key={`${el}:${localStorage[el]}`}\n      >\n        <td key={`Date, ${el}:${localStorage[el]}`}>{el}</td>\n        <td key={`Score, ${el}:${localStorage[el]}`}>{localStorage[el]}</td>\n      </tr>\n    ));\n  };\n\n  return (\n    <div className=\"Table\">\n      <motion.h3\n        className={`Table__Score${theme}`}\n        onClick={onClickHandler}\n        variants={variants}\n        whileTap={\"pulse\"}\n        whileHover={\"hover\"}\n      >\n        {showTable ? <MdKeyboardArrowRight /> : <MdKeyboardArrowDown />}\n        Scores\n      </motion.h3>\n      <motion.table\n        variants={variants}\n        initial={\"hidden\"}\n        animate={showTable ? \"show\" : \"hidden\"}\n      >\n        <thead>\n          <tr className=\"Row__Dark\">\n            <th>Date</th>\n            <th>Score</th>\n          </tr>\n        </thead>\n        <tbody>{renderRows()}</tbody>\n      </motion.table>\n    </div>\n  );\n};\n\nexport default PreviousScores;\n","import React, { useState } from \"react\";\nimport useBoard from \"./hooks/useBoard\";\nimport Board from \"./components/Board\";\nimport ToggleTheme from \"./components/ToggleTheme\";\nimport PreviousScores from \"./components/PreviousScores\";\nimport \"./App.css\";\n\nconst App = () => {\n  // Foi criado um custom hook chamado useBoard\n  // para manipular o estado do tabuleiro e\n  // abstrair toda a lógica\n  const { board, boardStatus } = useBoard();\n\n  // Os temas são elementos css com classes\n  // diferentes. Ex: `App${theme}` -> App__Light ou App__Dark\n  const [theme, setTheme] = useState(\"__Light\");\n\n  return (\n    <div className={`App${theme}`}>\n      <div className=\"Header\">\n        <div className={`Score${theme}`}>Score: {boardStatus.score}</div>\n        <ToggleTheme theme={theme} setTheme={setTheme} />\n      </div>\n      <Board board={board} boardStatus={boardStatus} />\n      <PreviousScores theme={theme} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}